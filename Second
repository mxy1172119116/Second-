1.o==o.clone（） 和 o.equals(o)区别


o.clone ()克隆对象与原对象不是一个对象。
o==o.clone（）结果是False

==操作比较的是两个变量的值是否相等，对于引用型变量表示的是两个变量在堆中存储的地址是否相同，即栈中的内容是否相同。   
equals操作表示的两个变量是否是对同一个对象的引用，即堆中的内容是否相同。
 ==比较的是2个对象的地址，而equals比较的是2个对象的内容。显然，当equals为true时，==不一定为true。




2.浅拷贝和深拷贝和完全拷贝比较

拷贝分为深拷贝和浅拷贝，完全拷贝三种。

浅拷贝就是建立一个新指针指向同一个对象，即同一个对象多份引用。

深拷贝则是完全复制目标对象，生成一个新的对象二进制数据，并用一个新指针指向新的对象，并且两个对象的相同位置的指针指向同一片区域。

完全拷贝则是完全复制目标对象，生成一个新的对象二进制数据，并用一个新指针指向新的对象，并且两个对象的相同位置的指针指向不同的区域，
即将对象里指针所指向的对象也复制一份。



3.单例模式和序列化拷贝

单例模式单例模式的要点有三个；一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。
从具体实现角度来说，就是以下三点：一是单例模式的类只提供私有的构造函数，二是类定义中含有一个该类的静态私有对象，
三是该类提供了一个静态的公有的函数用于创建或获取它本身的静态私有对象。

序列化拷贝在内存中通过字节流的拷贝。把母对象写入到一个字节流中，再从字节流中将其读出来，这样就可以创建一个新的对象了，
并且该新对象与母对象之间并不存在引用共享的问题，真正实现对象的深拷贝。
